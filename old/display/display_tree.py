import networkx as nx
import matplotlib.pyplot as plt


def display_tree(to_display: dict):
    graph = nx.from_dict_of_lists(to_display)

    nx.draw_networkx(graph)
    plt.show()


to_display = {
    'F': [(0, 32), (2, 11), 'IDENT_BIN', (0, 5), 'INSTR_PLUS', (0, 2), 'DECL_STAR', (0, 11), 'IDENT', (0, 18), (2, 11),
          (0, 31), (0, 26), (2, 11), (0, 31), (0, 28)], (0, 28): [28], (0, 31): [31], (2, 11): [11], (0, 26): [26],
    (0, 18): [18],
    'IDENT': [(3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0),
              (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0),
              (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0),
              (3, 0)], (3, 0): [0], (0, 11): [11], 'DECL_STAR': [],
    'DECL': [(2, 11), 'IDENT_BIN', (0, 5), 'INSTR_PLUS', (0, 2), 'DECL_STAR', (0, 11), 'TYPE', (0, 21), 'PARAMS_BIN',
             'IDENT', (0, 8), (2, 11), 'EXPR_EG_BIN', 'TYPE', (2, 10), 'IDENT_VIRG_PLUS', (2, 11), 'IDENT_BIN', (0, 5),
             'INSTR_PLUS', (0, 2), 'DECL_STAR', (0, 11), 'TYPE', (0, 21), 'PARAMS_BIN', 'IDENT', (0, 8), (2, 11),
             'EXPR_EG_BIN', 'TYPE', (2, 10), 'IDENT_VIRG_PLUS', (2, 11), 'EXPR_EG_BIN', 'TYPE', (2, 10),
             'IDENT_VIRG_PLUS'], (0, 8): [8], 'PARAMS_BIN': ['PARAMS', 'PARAMS'],
    'PARAMS': [(2, 8), 'PARAM_POINT_VIRG_PLUS', (2, 7), (2, 8), 'PARAM_POINT_VIRG_PLUS', (2, 7)], (2, 7): [7],
    'PARAM_POINT_VIRG_PLUS': ["PARAM_POINT_VIRG_PLUS'", 'PARAM', "PARAM_POINT_VIRG_PLUS'", 'PARAM',
                              "PARAM_POINT_VIRG_PLUS'", 'PARAM', "PARAM_POINT_VIRG_PLUS'", 'PARAM'],
    'PARAM': ['TYPE', 'MODE_BIN', (2, 10), 'IDENT_VIRG_PLUS', 'TYPE', 'MODE_BIN', (2, 10), 'IDENT_VIRG_PLUS', 'TYPE',
              'MODE_BIN', (2, 10), 'IDENT_VIRG_PLUS', 'TYPE', 'MODE_BIN', (2, 10), 'IDENT_VIRG_PLUS'],
    'IDENT_VIRG_PLUS': ["IDENT_VIRG_PLUS'", 'IDENT', "IDENT_VIRG_PLUS'", 'IDENT', "IDENT_VIRG_PLUS'", 'IDENT',
                        "IDENT_VIRG_PLUS'", 'IDENT', "IDENT_VIRG_PLUS'", 'IDENT', "IDENT_VIRG_PLUS'", 'IDENT',
                        "IDENT_VIRG_PLUS'", 'IDENT'], "IDENT_VIRG_PLUS'": [], (2, 10): [10], 'MODE_BIN': [],
    'TYPE': ['IDENT', 'IDENT', 'IDENT', 'IDENT', 'IDENT', 'IDENT', 'IDENT', 'IDENT', 'IDENT'],
    "PARAM_POINT_VIRG_PLUS'": [], (2, 8): [8], (0, 21): [21], 'EXPR_EG_BIN': [], (0, 2): [2],
    'INSTR_PLUS': ["INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR',
                   "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR',
                   "INSTR_PLUS'", 'INSTR', "INSTR_PLUS'", 'INSTR'],
    'INSTR': ["INSTR'", 'EXPR', (2, 11), 'EXPR_BIN', (0, 21), "INSTR'", 'EXPR', (2, 11), 'EXPR_BIN', (0, 21), "INSTR'",
              'EXPR', (2, 11), (0, 9), (0, 5), 'ELSE_BIN', 'ELSIF_STAR', 'INSTR_PLUS', (0, 23), 'EXPR', (0, 9),
              "INSTR'", 'EXPR', "INSTR'", 'EXPR', "INSTR'", 'EXPR', "INSTR'", 'EXPR'],
    'EXPR': ['ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE',
             'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE',
             'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE',
             'ACCESS', 'OPE', 'ACCESS', 'OPE', 'ACCESS', 'OPE'],
    'OPE': ["OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'",
            'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1',
            "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'", 'OPE1', "OPE'",
            'OPE1', "OPE'", 'OPE1'],
    'OPE1': ["OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2',
             "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2',
             "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2',
             "OPE1'", 'OPE2', "OPE1'", 'OPE2', "OPE1'", 'OPE2'],
    'OPE2': ["OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3',
             "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3',
             "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3',
             "OPE2'", 'OPE3', "OPE2'", 'OPE3', "OPE2'", 'OPE3'],
    'OPE3': ["OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4',
             "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4',
             "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4',
             "OPE3'", 'OPE4', "OPE3'", 'OPE4', "OPE3'", 'OPE4'],
    'OPE4': ["OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5',
             "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5',
             "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5',
             "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5', "OPE4'", 'OPE5'],
    'OPE5': ["OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6',
             "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6',
             "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6',
             "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6', "OPE5'", 'OPE6'],
    'OPE6': ["OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7',
             "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7',
             "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7',
             "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7', "OPE6'", 'OPE7'],
    'OPE7': ['OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8',
             'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8', 'OPE8'],
    'OPE8': ["EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'",
             "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'", "EXPR'",
             "EXPR'", "EXPR'"],
    "EXPR'": ["EXPR''", 'IDENT', "EXPR''", 'IDENT', "EXPR''", 'IDENT', "EXPR''", 'IDENT', "EXPR''", 'IDENT', "EXPR''",
              'IDENT', 'ENTIER', "EXPR''", 'IDENT', 'ENTIER', "EXPR''", 'IDENT', "EXPR''", 'IDENT', 'ENTIER', "EXPR''",
              'IDENT', 'ENTIER', "EXPR''", 'IDENT', "EXPR''", 'IDENT', 'ENTIER', 'ENTIER', "EXPR''", 'IDENT', "EXPR''",
              'IDENT', "EXPR''", 'IDENT', "EXPR''", 'IDENT', 'ENTIER', 'ENTIER', "EXPR''", 'IDENT', "EXPR''", 'IDENT'],
    "EXPR''": [], "OPE6'": [], "OPE5'": [], "OPE4'": [], "OPE3'": [], "OPE2'": [], "OPE1'": [], "OPE'": [],
    'ACCESS': [],
    "INSTR'": [(2, 11), 'EXPR', (1, 12), (2, 11), 'EXPR', (1, 12), (2, 11), 'EXPR', (1, 12), (2, 11), 'EXPR', (1, 12),
               (2, 11), (2, 11), 'EXPR', (1, 12), (2, 11)], (1, 12): [12], 'MULT': [(1, 2), (1, 2), (1, 2)],
    (1, 2): [2], "INSTR_PLUS'": [], 'EXPR_BIN': ['EXPR', 'EXPR'], (0, 5): [5], 'IDENT_BIN': ['IDENT', 'IDENT', 'IDENT'],
    'ENTIER': [(4, 0), (4, 0), (4, 0), (4, 0), (4, 0), (4, 0), (4, 0), (4, 0)], (4, 0): [2], 'ADD': [(1, 0)],
    (1, 0): [0], (0, 9): [9], 'EGAL': [(1, 8)], (1, 8): [8], (0, 23): [23],
    'EXPR_VIRG_PLUS': ["EXPR_VIRG_PLUS'", 'EXPR', "EXPR_VIRG_PLUS'", 'EXPR', "EXPR_VIRG_PLUS'", 'EXPR',
                       "EXPR_VIRG_PLUS'", 'EXPR', "EXPR_VIRG_PLUS'", 'EXPR', "EXPR_VIRG_PLUS'", 'EXPR'],
    "EXPR_VIRG_PLUS'": [], (2, 9): [9], 'ELSIF_STAR': [], 'ELSE_BIN': ['INSTR_PLUS', (0, 3)], (0, 3): [3]}

print(nx.is_tree(nx.from_dict_of_lists(to_display)))
display_tree(to_display)